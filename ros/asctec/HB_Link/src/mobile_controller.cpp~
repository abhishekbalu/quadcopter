#include "ros/ros.h"
#include "mobile_interaction.h"
#include "math.h"
#include <cmath>
#include <string.h>
#include <stdlib.h>
#include "std_msgs/String.h"
#include <sstream>
#include <iostream>
#include <geometry_msgs/Pose.h>
#include <Eigen/Dense>
#include <Eigen/Geometry>


#define PI  3.14159
#define ROLL_MAX  1
#define PITCH_MAX  1

geometry_msgs::Pose Obj,Cur;
geometry_msgs::Vector3 Vel;	
geometry_msgs::Point obj;
std::string task;
std::string temp;
char input_c[MAX_INPUT_SIZE];
char task_c[MAX_INPUT_SIZE];
// controller configurations
double Kp, Kv, Ki, NtoScale, max_thrust, Ko, Kr,Kry, P, Pr, M, obs1_x, obs1_y, obs1_rad, obs2_x,obs2_y,obs2_rad,T,O2; 
bool reached;

// control structure
asctec_hl_comm::mav_ctrl control;
Eigen::Matrix<double,3,1> I;
Eigen::Matrix<double,6,1> dist;

//Reference for take off
double refto_x;
double refto_y;
double refto_z;

//Reference for goal relative setting
double refgo_x;
double refgo_y;
double refgo_z;

bool l; // 'l'anded
bool t; // 't'aken off
bool a; // goal 'a'ctive

//c stands for control, d for distance, p for position
FILE* log_c;
FILE* log_d;
FILE* log_p;
FILE* log_a;
FILE* log_q;
FILE* log_i;
FILE* log_obs;

bool Control(geometry_msgs::Point Obj);

void objectiveCallback(const std_msgs::String::ConstPtr& obj){

	ROS_DEBUG("Task: %s", obj->data.c_str());
	temp=obj->data.c_str();
	reset_char_array(input_c, MAX_INPUT_SIZE);
	reset_char_array(task_c, MAX_INPUT_SIZE);
	fill_char_array(input_c, temp);
	int ret_task;
	// Reading the task
	ret_task=sscanf(input_c,"%15[a-zA-Z_]s",task_c);	
	
	task.clear();
	task=task_c;
}


void poseCallback(const sensor_fusion_comm::ExtState::ConstPtr& cur){
	
     ROS_DEBUG("current position: %f, %f, %f", cur->pose.position.x, cur->pose.position.y, cur->pose.position.z);
	
	Cur=cur->pose;
	Vel=cur->velocity;
	
	if(l){ //updating the takeoff reference position if the drone is still landed
	    refto_z=Cur.position.z;
	    refto_x=Cur.position.x;
	    refto_y=Cur.position.y;
	}
	
	if(!a){ //updating the goal reference position if no goals are active yet
	    refgo_x=Cur.position.x;
	    refgo_y=Cur.position.y;
	    refgo_z=Cur.position.z;
	}
}


int main(int argc, char** argv){

	ros::init(argc, argv,"position_controller");

	ros::NodeHandle n;
	//Initial state: the drone is landed, it did not take off yet, and there are no goals active.
	l=true;
	t=false;
	a=false;

	//subscription & publication
	ros::Publisher pub=n.advertise<asctec_hl_comm::mav_ctrl>("fcu/control",2);
	ros::Subscriber ObjSub=n.subscribe("objective", 2, objectiveCallback);
	ros::Subscriber PoseSub=n.subscribe("/ssf_core/ext_state",3, poseCallback);
	
	ros::Rate loop_rate(20);
	
    	//init variables
	double H; //Height for takeoff
	int j;
	int i;
	int ret_param;

	I(0,0)=0;
	I(1,0)=0;
	I(2,0)=0;

	FILE* param;
	char line_c[MAX_INPUT_SIZE];
	double Height;
	double* Param;

	char seq0[5];
	double seq1;
	Param=(double*) malloc(19*sizeof(double)); //contains all parameters in config file opened just below

	param=fopen("/home/linaro/rosws/sandbox/HB_Link/src/parameters","r"); //open the config file
	if(param!=NULL){
	    for(i=0;i<19;i++){
		if(fgets(line_c,50,param)!=NULL){
		    printf("La ligne: %s \n",line_c);
		    ret_param=sscanf(line_c,"%s %lf", &seq0,&seq1);
		    Param[i]=seq1; // store value in Param
		}	
	    }
	fclose(param);
	}
	
	Kp=Param[0]; //The controller's proportional gain
	Kv=Param[1]; //The controller's derivative gain
	Ki=Param[2]; //The controller's integral gain
	Height=Param[3]; //The height supposed to be reached on takeoff
	NtoScale=Param[4]; //The scale on which the thust commands are sent (in arbitrary unit(between 0 and 1) per Newton)
	max_thrust=Param[5]; //Thrust limit (<1)
	Ko=Param[6]; //Magnitude of the repulsive component
	Kr=Param[7]; //Magnitude of the roative component
	Kry=Param[8]; //Choice of field : 0 for rotative repulsive field, 1 for flow field, 2 for adaptive roatitve field
	P=Param[9]; //Power applied to the replusive field
	Pr=Param[10]; //Power applied to the rotating field ( = P for a simplified study)
	M=Param[11]; //0 if no moving obstacle ; [a non zero number] if you want the obstacle #1 to oscilate on the y-axis with amplitude M
	O2=Param[12]; //0 if no second obstacle ; 1 if second obstacle
	obs1_x=Param[13]; //First obstacle's first coordinate
	obs1_y=Param[14]; //First obstacle's second coordinate
	obs1_rad=Param[15]; //First obstacle's radius
    	obs2_x=Param[16]; //Second obstacle's first coordinate
	obs2_y=Param[17]; //Second obstacle's second coordinate
	obs2_rad=Param[18]; //Second obstacle's radius
	//NB: the second obstacle will have exactly the same propreties as the first obstacle (shape, magnitudes, power)
	
	// open log files
	log_c=fopen("/home/linaro/rosws/sandbox/HB_Link/control_log","w");
	log_d=fopen("/home/linaro/rosws/sandbox/HB_Link/objective_log","w");
	log_p=fopen("/home/linaro/rosws/sandbox/HB_Link/position_log","w");
	log_a=fopen("/home/linaro/rosws/sandbox/HB_Link/attitude_log","w");
	log_q=fopen("/home/linaro/rosws/sandbox/HB_Link/quaternion_log","w");
	log_i=fopen("/home/linaro/rosws/sandbox/HB_Link/integrator_log","w");
	log_obs=fopen("/home/linaro/rosws/sandbox/HB_Link/obstacle_log","w");
	

	// initialize controller values
	control.type=asctec_hl_comm::mav_ctrl::acceleration;
	control.z=0;
	control.y=0;
	control.x=0;
	control.yaw=0;
	H=Height;
	T=0;

	while(ros::ok()){

		if(task=="takeoff"){
		    ROS_INFO("Taking off...");
		    if(l && fabs(refto_x)>0.01 && fabs(refto_y)>0.01){ //it usually take a few loops for the reference to be updated with the first pose callback. This condition on abs is here to prevent the reference to be 0 0 0 (as it practically never is during an actual flight outside...)
			ROS_INFO("%f %f %f",refto_x, refto_y ,refto_z);
			l=false;
		    }
		    
		    
		    // define objective
		    geometry_msgs::Point obj;
		    obj.x=refto_x;
		    obj.y=refto_y;
		    obj.z=refto_z+H;
		    
		    ROS_INFO("Ref: %f %f %f",refto_x,refto_y,refto_z);
		    ROS_INFO("abs(ref): %f %f %f",fabs(refto_x),fabs(refto_y)); 
		    
		    // compute control
		    if(fabs(refto_x)>0.01 || fabs(refto_y)>0.01){
			reached=Control(obj);
			for(j=0;j<1;j++){		
			   pub.publish(control);
			}
			if(reached){
			   if(!t){
				//Prints a particular point in the log for the user to see were take off was achieved
				fprintf(log_d,"0 0 0 0 0 0 \n");
				t=true;
			   }
			   printf("the drone took off successfully! \n");
			}
		    }
		}

		if(task=="land" && !l ){ //normally, another condition is t (the drone has to have taken off in oder to land)
		    t=false;
		    ROS_INFO("Landing...");
		    double m=0.5804;
		    double g=9.81;
		    
		    //landing is done indepedently of the controller, i.e independently of the deviation etc.

		    // send a descending command for a fixed time (20*1/loop_rate) to have a little but observable speed
		    control.type=asctec_hl_comm::mav_ctrl::acceleration;
		    control.z=NtoScale*(m*g-0.1);
		    control.y=0;
		    control.x=0;
		    control.yaw=0;
		    for(j=0;j<20;j++){
			 pub.publish(control);
			 loop_rate.sleep();
		    }
	
		    // if the speed is not close from 0, the drone hasn't landed yet
		    if(fabs(Vel.z)>0.2){
			control.type=asctec_hl_comm::mav_ctrl::acceleration;
			control.z=NtoScale*(m*g-0.1);
			control.y=0;
			control.x=0;
			control.yaw=0;
			for(j=0;j<1;j++){
			    pub.publish(control);
			}
		    }   
		    // if the speed is close from 0, the drone has (probably...) landed. then the motors can be stoped.
		    if(fabs(Vel.z)<0.2){
		        
			control.type=asctec_hl_comm::mav_ctrl::acceleration;
			control.z=0;
			control.y=0;
			control.x=0;
			control.yaw=0;
			 for(j=0;j<1;j++){
			    pub.publish(control);
			 }
			l=true;
			printf("the drone landed successfully!\n");
		    }
		}

		if(task=="goal" && !l){
			double X,Y,Z;	    

			// set the goal
			ROS_DEBUG("setting goal...");
			int isRelative,seq0;
			int ret_goal;
			ret_goal=sscanf(input_c,"%n%*[a-za-z_/] %d %lf %lf %lf", &seq0,&isRelative, &X, &Y, &Z);
			if(!a){
			//a goal is now active
			    ROS_INFO("Switching to goal mode");
			    a=true;
			}
			
			if(isRelative==0){	
			    obj.x=X;
			    obj.y=Y;
			    obj.z=Z;
				
			}
			else{
			    if(fabs(obj.x-X-refgo_x)+fabs(obj.y-Y-refgo_y)+fabs(obj.z-Z-refgo_z)>0.5){
				a=false;// 'a' has to be false again for the refgo to update, in case of two relative goals given successively
			    }
			    obj.x=X+refgo_x;
			    obj.y=Y+refgo_y;
			    obj.z=Z+refgo_z;
			}
				

			ROS_INFO("goal set: %f %f %f",obj.x,obj.y,obj.z);
		    
			// compute control
		        reached = Control(obj);
			for(j=0;j<1;j++){		
	    			pub.publish(control);
			}
		   if(reached){ 
			printf("objective reached!");
		    }	    
		}
	    
	
	ros::spinOnce();
	loop_rate.sleep();
    	}
return 0;
}
		
		
double sign(double x){
	if(x!=0){
	    return (x>0)-(x<0);
	}
	else return 0;
}
		

bool Control(geometry_msgs::Point Obj){
	
	// init variables
	float thrust=0;
    	float roll=0;
    	float pitch=0;
    	float yaw=0;
	
	float croll,cpitch,cyaw,froll,fpitch,fyaw;
    	double m=0.5804;
    	double g=9.81;

    	Eigen::Matrix<double,3,1> F;
	Eigen::Matrix<double,3,1> Ft;
	Eigen::Matrix<double,3,3> R;
	Eigen::Matrix<double,3,1> X;
	Eigen::Matrix<double,3,1> V;
	Eigen::Matrix<double,3,1> z1;	
	Eigen::Matrix<double,3,1> E;
	Eigen::Matrix<double,3,1> Er;
	double x,y,z,w;


	// x is more of a dx actually, it's the difference between xcurrent and xobjective
    	X(0,0)=-Obj.x+Cur.position.x;
    	X(1,0)=-Obj.y+Cur.position.y;
    	X(2,0)=-Obj.z+Cur.position.z;

	// Limit the max distance, and thus the controller's command
	if(abs(X(0,0))>10){
	    X(0,0)=sign(X(0,0))*10;
	    }
	if(abs(X(1,0))>10){
	    X(1,0)=sign(X(1,0))*10;
	    }
	if(abs(X(2,0))>10){
	    X(2,0)=sign(X(2,0))*10;
	    }
	
	// v = dv, because we always aim at a zero speed on the goal
    	V(0,0)=Vel.x;
    	V(1,0)=Vel.y;
    	V(2,0)=Vel.z;

	dist(0,0)=X(0,0);
	dist(1,0)=X(1,0);
	dist(2,0)=X(2,0);
	dist(3,0)=V(0,0);
	dist(4,0)=V(1,0);
	dist(5,0)=V(2,0);

	if(log_d!=NULL){
	    fprintf(log_d,"%f %f %f %f %f %f \n",dist(0,0),dist(1,0),dist(2,0),dist(3,0),dist(4,0),dist(5,0));
	    }
	if(log_c!=NULL){
	    fprintf(log_p,"%f %f %f \n", Cur.position.x,Cur.position.y,Cur.position.z);
	    }

	z1(0,0)=0; z1(1,0)=0; z1(2,0)=1;

	// move the obstacle#1 if M!=0 !!!!! -TO BE TESTED- !!!!!!
	obs1_x=obs1_x;
	obs1_y=obs1_y+M*sin(T/20);
	T=T+1;
	fprintf(log_obs,"%f %f \n", obs1_x,obs1_y);
	

	double dx1,dy1,dx2,dy2;

	dx1=obs1_x-Cur.position.x;
	dy1=obs1_y-Cur.position.y;
	dx2=obs2_x-Cur.position.x;
	dy2=obs2_y-Cur.position.y;
	
	//Defines the repulsive component 
	E(0,0)=dx1*pow(obs1_rad,P-1)/pow(sqrt(dx1*dx1+dy1*dy1),P);
	E(1,0)=dy1*pow(obs1_rad,P-1)/pow(sqrt(dx1*dx1+dy1*dy1),P);
	E(2,0)=0;
	
	//Defines the shape of the rotating component
	if(Kry==0){

	    //classic rotating potential (counter-clockwise, multiply by -1 for clockwise)
	    Er(0,0)=dy1*pow(obs1_rad,Pr-1)/pow(sqrt(dx1*dx1+dy1*dy1),Pr);
	    Er(1,0)=-dx1*pow(obs1_rad,Pr-1)/pow(sqrt(dx1*dx1+dy1*dy1),Pr);
	    Er(2,0)=0;
	}
	else if(Kry==1){

	    //flow-around-a-cylinder potential (flow axis y)
	    Er(0,0)=-dy1*dy1*pow(obs1_rad,Pr-1)/pow(sqrt(dx1*dx1+dy1*dy1),Pr);
	    Er(1,0)=dx1*dy1*pow(obs1_rad,Pr-1)/pow(sqrt(dx1*dx1+dy1*dy1),Pr);
	    Er(2,0)=0;
	}
	else{
	 // adaptative rotating potential
	 if(sqrt(dx1*dx1+dy1*dy1)<1.5*obs1_rad){
		if(-dx1*dist(1,0)+dy1*dist(0,0)<0){
		    Er(0,0)=dy1*pow(obs1_rad,Pr-1)/pow(sqrt(dx1*dx1+dy1*dy1),Pr);
		    Er(1,0)=-dx1*pow(obs1_rad,Pr-1)/pow(sqrt(dx1*dx1+dy1*dy1),Pr);
		    Er(2,0)=0;
		}
		else{
		    Er(0,0)=-dy1*pow(obs1_rad,Pr-1)/pow(sqrt(dx1*dx1+dy1*dy1),Pr);
		    Er(1,0)=dx1*pow(obs1_rad,Pr-1)/pow(sqrt(dx1*dx1+dy1*dy1),Pr);
		    Er(2,0)=0;
		}
	    }
	}
	

	//if O2==1, a second obstacle will be placed according to paraters, with the same propreties as the first obstacle
	//!!!!!!! -TO BE TESTED- !!!!!!!
	if(O2==1){

	    E(0,0)=E(0,0)+dx2*pow(obs2_rad,P-1)/pow(sqrt(dx2*dx2+dy2*dy2),P);
	    E(1,0)=E(1,0)+dy2*pow(obs2_rad,P-1)/pow(sqrt(dx2*dx2+dy2*dy2),P);
	    E(2,0)=0;
	
	
	    if(Kry==0){

		//classic rotating potential (counter-clockwise, multiply by -1 for clockwise)
		Er(0,0)=Er(0,0)+dy2*pow(obs2_rad,Pr-1)/pow(sqrt(dx2*dx2+dy2*dy2),Pr);
		Er(1,0)=Er(1,0)-dx2*pow(obs2_rad,Pr-1)/pow(sqrt(dx2*dx2+dy2*dy2),Pr);
		Er(2,0)=0;
	    }
	    else if(Kry==1){

		//flow-around-a-cylinder potential (flow axis y)
		Er(0,0)=Er(0,0)-dy2*dy2*pow(obs2_rad,Pr-1)/pow(sqrt(dx2*dx2+dy2*dy2),Pr);
		Er(1,0)=Er(1,0)+dx2*dy2*pow(obs2_rad,Pr-1)/pow(sqrt(dx2*dx2+dy2*dy2),Pr);
		Er(2,0)=0;
	    }
	    else{
	    // adaptative rotating potential
		if(sqrt(dx2*dx2+dy2*dy2)<1.5*obs2_rad){
		    if(-dx2*dist(1,0)+dy2*dist(0,0)<0){
			Er(0,0)=Er(0,0)+dy2*pow(obs2_rad,Pr-1)/pow(sqrt(dx2*dx2+dy2*dy2),Pr);
			Er(1,0)=Er(1,0)-dx2*pow(obs2_rad,Pr-1)/pow(sqrt(dx2*dx2+dy2*dy2),Pr);
			Er(2,0)=0;
		    }   
		    else{
			Er(0,0)=Er(0,0)-dy2*pow(obs2_rad,Pr-1)/pow(sqrt(dx2*dx2+dy2*dy2),Pr);
			Er(1,0)=Er(1,0)+dx2*pow(obs2_rad,Pr-1)/pow(sqrt(dx2*dx2+dy2*dy2),Pr);
			Er(2,0)=0;
		    }
		}
	    }   
	}	

	// define the force vector		

	F=-Kp*X-Kv*V+m*g*z1-Ki*I-Ko*E-Kr*Er;

	I(0,0)=0;
	I(1,0)=0;
	I(2,0)=I(2,0)+X(2,0);
	
	//Limiting the value of the integrator (for safety)
	if(Ki!=0.0){
	    if(abs(I(0,0))>2/Ki){
		I(0,0)=sign(I(0,0))*2/Ki;
	    }
	    if(abs(I(1,0))>2/Ki){
		I(1,0)=sign(I(1,0))*2/Ki;
	    }
	    if(abs(I(2,0))>2/Ki){
		I(2,0)=sign(I(2,0))*2/Ki;
	    }
	}

	if(log_i!=NULL){
	    fprintf(log_i,"%f %f %f \n", I(0,0),I(1,0),I(2,0));
	}
	ROS_INFO("force is : %lf %lf %lf",F(0,0),F(1,0),F(2,0));
	
	x=Cur.orientation.x;
	y=Cur.orientation.y;
	z=Cur.orientation.z;
	w=Cur.orientation.w;

	// convert current pose quaternion to current roll, yaw, and pitch	
	// c stands for current in the whole controller
	croll=atan2(2*(w*x+z*y),(1-2*(x*x+y*y)));
		
    	cyaw=atan2(2*(w*z+x*y),(1-2*(y*y+z*z)));
		
    	cpitch=asin(2*(w*y-x*z));
		
	//Define the rotation matrix
	
	R(0,0)=cos(cyaw);
	R(1,0)=-sin(cyaw);
	R(2,0)=0;
	R(0,1)=sin(cyaw);
	R(1,1)=cos(cyaw);
	R(2,1)=0;
	R(0,2)=0;
	R(1,2)=0;
	R(2,2)=1;


	fprintf(log_a,"%f %f %f \n",croll, cpitch, cyaw);
	fprintf(log_q,"%f %f %f %f \n", w,x,y,z);
	
    	// compute thrust in the inertial frame (safeguard for thrust>1 is implemented within the LLP)
    	thrust=NtoScale*(F(2,0)/(cos(croll)*cos(cpitch)));

	if(thrust<0){
	    thrust=0;
	}

	// theoretically useless, but to be kept during test phases for safety
	if(thrust>max_thrust){
	    thrust=max_thrust;
	}

	ROS_INFO("thrust sent: %lf",thrust);
	
	// Rotate the force to have pitch and roll commands in the inertial frame
	Ft=R*F;

	// Safeguards
	if(F(0,0)==0){
	    ROS_INFO("F(0,0)=0!");
    	    fyaw=sign(Ft(1,0))*PI/2;
    	}
    	else{
	    fyaw=atan(Ft(1,0)/Ft(0,0));
    	}
	if(F(2,0)==0){
	    ROS_INFO("F(2,0)=0!"); 
    	    fpitch=PITCH_MAX*sign(Ft(0,0));
	    froll=ROLL_MAX*sign(Ft(1,0));
    	}
	else{
	    fpitch=atan(Ft(0,0)/abs(Ft(2,0)));
	    froll=atan(Ft(1,0)/abs(Ft(2,0)));
    	}
	
	// compute commanded pitch and roll (with the force's angles.)	
	yaw=0 //yaw command is not given in value but in speed. The yaw does not change during the flight;
	pitch=fpitch;
	roll=froll;

	// safeguards for pitch and roll

	if(abs(roll)>ROLL_MAX){
	    ROS_INFO("roll_max attained!");
	    roll=sign(roll)*ROLL_MAX;
	}

	if(pitch>PITCH_MAX){
	    ROS_INFO("pitch_max attained!");
	   pitch=sign(pitch)*PITCH_MAX;
	}

	// updates the control
	control.type=asctec_hl_comm::mav_ctrl::acceleration;
	control.x=(-1)*pitch;
	control.y=roll;
	control.z=thrust;
	control.yaw=yaw;
	if(log_c!=NULL){
	    fprintf(log_c,"%f %f %f %f \n",control.x,control.y,control.z,control.yaw);
	}

	//if the speed is small and the distance to the objective is small, the objective is reached
	if(X.norm()<1 && sqrt(Vel.x*Vel.x+Vel.y*Vel.y+Vel.z*Vel.z)<0.5){
	        return true;
        }else{
	return false;
	}
}
