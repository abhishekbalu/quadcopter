/* Auto-generated by genmsg_cpp for file /home/minnig/ros_workspace/HbPosCtrl/msg/ctrl_debug.msg */
#ifndef HBPOSCTRL_MESSAGE_CTRL_DEBUG_H
#define HBPOSCTRL_MESSAGE_CTRL_DEBUG_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"

namespace HbPosCtrl
{
template <class ContainerAllocator>
struct ctrl_debug_ : public ros::Message
{
  typedef ctrl_debug_<ContainerAllocator> Type;

  ctrl_debug_()
  : header()
  , epos()
  , evel()
  , fdes()
  , acc()
  , accb()
  , accref()
  , velref()
  , posref()
  , angles()
  , integrator()
  {
  }

  ctrl_debug_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , epos(_alloc)
  , evel(_alloc)
  , fdes(_alloc)
  , acc(_alloc)
  , accb(_alloc)
  , accref(_alloc)
  , velref(_alloc)
  , posref(_alloc)
  , angles(_alloc)
  , integrator(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _epos_type;
   ::geometry_msgs::Point_<ContainerAllocator>  epos;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _evel_type;
   ::geometry_msgs::Point_<ContainerAllocator>  evel;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _fdes_type;
   ::geometry_msgs::Point_<ContainerAllocator>  fdes;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _acc_type;
   ::geometry_msgs::Point_<ContainerAllocator>  acc;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _accb_type;
   ::geometry_msgs::Point_<ContainerAllocator>  accb;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _accref_type;
   ::geometry_msgs::Point_<ContainerAllocator>  accref;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _velref_type;
   ::geometry_msgs::Point_<ContainerAllocator>  velref;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _posref_type;
   ::geometry_msgs::Point_<ContainerAllocator>  posref;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _angles_type;
   ::geometry_msgs::Point_<ContainerAllocator>  angles;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _integrator_type;
   ::geometry_msgs::Point_<ContainerAllocator>  integrator;


private:
  static const char* __s_getDataType_() { return "HbPosCtrl/ctrl_debug"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f7891061b6e899323360de7ce885079e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
geometry_msgs/Point epos\n\
geometry_msgs/Point evel\n\
geometry_msgs/Point fdes\n\
geometry_msgs/Point acc\n\
geometry_msgs/Point accb\n\
geometry_msgs/Point accref\n\
geometry_msgs/Point velref\n\
geometry_msgs/Point posref\n\
geometry_msgs/Point angles\n\
geometry_msgs/Point integrator\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, epos);
    ros::serialization::serialize(stream, evel);
    ros::serialization::serialize(stream, fdes);
    ros::serialization::serialize(stream, acc);
    ros::serialization::serialize(stream, accb);
    ros::serialization::serialize(stream, accref);
    ros::serialization::serialize(stream, velref);
    ros::serialization::serialize(stream, posref);
    ros::serialization::serialize(stream, angles);
    ros::serialization::serialize(stream, integrator);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, epos);
    ros::serialization::deserialize(stream, evel);
    ros::serialization::deserialize(stream, fdes);
    ros::serialization::deserialize(stream, acc);
    ros::serialization::deserialize(stream, accb);
    ros::serialization::deserialize(stream, accref);
    ros::serialization::deserialize(stream, velref);
    ros::serialization::deserialize(stream, posref);
    ros::serialization::deserialize(stream, angles);
    ros::serialization::deserialize(stream, integrator);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(epos);
    size += ros::serialization::serializationLength(evel);
    size += ros::serialization::serializationLength(fdes);
    size += ros::serialization::serializationLength(acc);
    size += ros::serialization::serializationLength(accb);
    size += ros::serialization::serializationLength(accref);
    size += ros::serialization::serializationLength(velref);
    size += ros::serialization::serializationLength(posref);
    size += ros::serialization::serializationLength(angles);
    size += ros::serialization::serializationLength(integrator);
    return size;
  }

  typedef boost::shared_ptr< ::HbPosCtrl::ctrl_debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::HbPosCtrl::ctrl_debug_<ContainerAllocator>  const> ConstPtr;
}; // struct ctrl_debug
typedef  ::HbPosCtrl::ctrl_debug_<std::allocator<void> > ctrl_debug;

typedef boost::shared_ptr< ::HbPosCtrl::ctrl_debug> ctrl_debugPtr;
typedef boost::shared_ptr< ::HbPosCtrl::ctrl_debug const> ctrl_debugConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::HbPosCtrl::ctrl_debug_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::HbPosCtrl::ctrl_debug_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace HbPosCtrl

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::HbPosCtrl::ctrl_debug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f7891061b6e899323360de7ce885079e";
  }

  static const char* value(const  ::HbPosCtrl::ctrl_debug_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf7891061b6e89932ULL;
  static const uint64_t static_value2 = 0x3360de7ce885079eULL;
};

template<class ContainerAllocator>
struct DataType< ::HbPosCtrl::ctrl_debug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "HbPosCtrl/ctrl_debug";
  }

  static const char* value(const  ::HbPosCtrl::ctrl_debug_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::HbPosCtrl::ctrl_debug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Point epos\n\
geometry_msgs/Point evel\n\
geometry_msgs/Point fdes\n\
geometry_msgs/Point acc\n\
geometry_msgs/Point accb\n\
geometry_msgs/Point accref\n\
geometry_msgs/Point velref\n\
geometry_msgs/Point posref\n\
geometry_msgs/Point angles\n\
geometry_msgs/Point integrator\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::HbPosCtrl::ctrl_debug_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::HbPosCtrl::ctrl_debug_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::HbPosCtrl::ctrl_debug_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::HbPosCtrl::ctrl_debug_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.epos);
    stream.next(m.evel);
    stream.next(m.fdes);
    stream.next(m.acc);
    stream.next(m.accb);
    stream.next(m.accref);
    stream.next(m.velref);
    stream.next(m.posref);
    stream.next(m.angles);
    stream.next(m.integrator);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ctrl_debug_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::HbPosCtrl::ctrl_debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::HbPosCtrl::ctrl_debug_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "epos: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.epos);
    s << indent << "evel: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.evel);
    s << indent << "fdes: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.fdes);
    s << indent << "acc: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.acc);
    s << indent << "accb: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.accb);
    s << indent << "accref: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.accref);
    s << indent << "velref: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.velref);
    s << indent << "posref: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.posref);
    s << indent << "angles: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.angles);
    s << indent << "integrator: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.integrator);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HBPOSCTRL_MESSAGE_CTRL_DEBUG_H

