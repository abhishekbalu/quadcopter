/* Auto-generated by genmsg_cpp for file /home/pedro/ros/asctec/main_control/msg/full_state.msg */
#ifndef MAIN_CONTROL_MESSAGE_FULL_STATE_H
#define MAIN_CONTROL_MESSAGE_FULL_STATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace main_control
{
template <class ContainerAllocator>
struct full_state_ {
  typedef full_state_<ContainerAllocator> Type;

  full_state_()
  : header()
  , position()
  , velocity()
  , angles()
  {
  }

  full_state_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , position(_alloc)
  , velocity(_alloc)
  , angles(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  position;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  velocity;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angles_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  angles;


  typedef boost::shared_ptr< ::main_control::full_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main_control::full_state_<ContainerAllocator>  const> ConstPtr;
}; // struct full_state
typedef  ::main_control::full_state_<std::allocator<void> > full_state;

typedef boost::shared_ptr< ::main_control::full_state> full_statePtr;
typedef boost::shared_ptr< ::main_control::full_state const> full_stateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::main_control::full_state_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::main_control::full_state_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace main_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::main_control::full_state_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::main_control::full_state_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::main_control::full_state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ec8492284113e82482a1545812d071d";
  }

  static const char* value(const  ::main_control::full_state_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4ec8492284113e82ULL;
  static const uint64_t static_value2 = 0x482a1545812d071dULL;
};

template<class ContainerAllocator>
struct DataType< ::main_control::full_state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "main_control/full_state";
  }

  static const char* value(const  ::main_control::full_state_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::main_control::full_state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
geometry_msgs/Vector3       position\n\
geometry_msgs/Vector3       velocity\n\
\n\
geometry_msgs/Vector3    		angles\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::main_control::full_state_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::main_control::full_state_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::main_control::full_state_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::main_control::full_state_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.angles);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct full_state_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main_control::full_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::main_control::full_state_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "angles: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angles);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MAIN_CONTROL_MESSAGE_FULL_STATE_H

