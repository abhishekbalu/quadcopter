/* Auto-generated by genmsg_cpp for file /home/pedro/ros/height/msg/full_pose.msg */
#ifndef HEIGHT_MESSAGE_FULL_POSE_H
#define HEIGHT_MESSAGE_FULL_POSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "height/Attitude.h"

namespace height
{
template <class ContainerAllocator>
struct full_pose_ {
  typedef full_pose_<ContainerAllocator> Type;

  full_pose_()
  : header()
  , ang_vel()
  , lin_acc()
  , attitude()
  , z(0.0)
  , x(0.0)
  , y(0.0)
  , vx(0.0)
  , vy(0.0)
  , quality(0)
  {
  }

  full_pose_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , ang_vel(_alloc)
  , lin_acc(_alloc)
  , attitude(_alloc)
  , z(0.0)
  , x(0.0)
  , y(0.0)
  , vx(0.0)
  , vy(0.0)
  , quality(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ang_vel_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  ang_vel;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _lin_acc_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  lin_acc;

  typedef  ::height::Attitude_<ContainerAllocator>  _attitude_type;
   ::height::Attitude_<ContainerAllocator>  attitude;

  typedef double _z_type;
  double z;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _vx_type;
  double vx;

  typedef double _vy_type;
  double vy;

  typedef int8_t _quality_type;
  int8_t quality;


  typedef boost::shared_ptr< ::height::full_pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::height::full_pose_<ContainerAllocator>  const> ConstPtr;
}; // struct full_pose
typedef  ::height::full_pose_<std::allocator<void> > full_pose;

typedef boost::shared_ptr< ::height::full_pose> full_posePtr;
typedef boost::shared_ptr< ::height::full_pose const> full_poseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::height::full_pose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::height::full_pose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace height

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::height::full_pose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::height::full_pose_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::height::full_pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a3ec521dd8d5d73781ebeb348bf58cdb";
  }

  static const char* value(const  ::height::full_pose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa3ec521dd8d5d737ULL;
  static const uint64_t static_value2 = 0x81ebeb348bf58cdbULL;
};

template<class ContainerAllocator>
struct DataType< ::height::full_pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "height/full_pose";
  }

  static const char* value(const  ::height::full_pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::height::full_pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Vector3 ang_vel\n\
geometry_msgs/Vector3 lin_acc\n\
Attitude attitude\n\
float64 z\n\
float64 x\n\
float64 y\n\
float64 vx\n\
float64 vy\n\
int8 quality\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: height/Attitude\n\
# Yaw [-pi .. pi] (0 = neutral)\n\
float64 yaw\n\
# Pitch [-pi/4 .. pi/4] (0 = neutral)\n\
float64 pitch\n\
# Roll  [-pi/4 .. pi/4] (0 = neutral)\n\
float64 roll\n\
\n\
";
  }

  static const char* value(const  ::height::full_pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::height::full_pose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::height::full_pose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::height::full_pose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.ang_vel);
    stream.next(m.lin_acc);
    stream.next(m.attitude);
    stream.next(m.z);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.vx);
    stream.next(m.vy);
    stream.next(m.quality);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct full_pose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::height::full_pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::height::full_pose_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ang_vel: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ang_vel);
    s << indent << "lin_acc: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.lin_acc);
    s << indent << "attitude: ";
s << std::endl;
    Printer< ::height::Attitude_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "quality: ";
    Printer<int8_t>::stream(s, indent + "  ", v.quality);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HEIGHT_MESSAGE_FULL_POSE_H

