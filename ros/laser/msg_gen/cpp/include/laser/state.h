/* Auto-generated by genmsg_cpp for file /home/ubuntu/quadcopter/ros/laser/msg/state.msg */
#ifndef LASER_MESSAGE_STATE_H
#define LASER_MESSAGE_STATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "laser/Attitude.h"

namespace laser
{
template <class ContainerAllocator>
struct state_ {
  typedef state_<ContainerAllocator> Type;

  state_()
  : header()
  , attitude()
  , x(0.0)
  , y(0.0)
  , vx(0.0)
  , vy(0.0)
  , quality(0)
  {
  }

  state_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , attitude(_alloc)
  , x(0.0)
  , y(0.0)
  , vx(0.0)
  , vy(0.0)
  , quality(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::laser::Attitude_<ContainerAllocator>  _attitude_type;
   ::laser::Attitude_<ContainerAllocator>  attitude;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _vx_type;
  double vx;

  typedef double _vy_type;
  double vy;

  typedef int8_t _quality_type;
  int8_t quality;


  typedef boost::shared_ptr< ::laser::state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser::state_<ContainerAllocator>  const> ConstPtr;
}; // struct state
typedef  ::laser::state_<std::allocator<void> > state;

typedef boost::shared_ptr< ::laser::state> statePtr;
typedef boost::shared_ptr< ::laser::state const> stateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::laser::state_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::laser::state_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace laser

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::laser::state_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::laser::state_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::laser::state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b9b433aa82e5650478ff80fb4e33969f";
  }

  static const char* value(const  ::laser::state_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb9b433aa82e56504ULL;
  static const uint64_t static_value2 = 0x78ff80fb4e33969fULL;
};

template<class ContainerAllocator>
struct DataType< ::laser::state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "laser/state";
  }

  static const char* value(const  ::laser::state_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::laser::state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
Attitude attitude\n\
float64 x\n\
float64 y\n\
float64 vx\n\
float64 vy\n\
int8 quality\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: laser/Attitude\n\
# Yaw [-pi .. pi] (0 = neutral)\n\
float64 yaw\n\
# Pitch [-pi/4 .. pi/4] (0 = neutral)\n\
float64 pitch\n\
# Roll  [-pi/4 .. pi/4] (0 = neutral)\n\
float64 roll\n\
\n\
";
  }

  static const char* value(const  ::laser::state_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::laser::state_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::laser::state_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::laser::state_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.attitude);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.vx);
    stream.next(m.vy);
    stream.next(m.quality);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct state_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser::state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::laser::state_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "attitude: ";
s << std::endl;
    Printer< ::laser::Attitude_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "quality: ";
    Printer<int8_t>::stream(s, indent + "  ", v.quality);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LASER_MESSAGE_STATE_H

