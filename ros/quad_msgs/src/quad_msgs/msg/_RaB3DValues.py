# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quad_msgs/RaB3DValues.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RaB3DValues(genpy.Message):
  _md5sum = "d545ad25f277fa2f103f50edd34b4b6d"
  _type = "quad_msgs/RaB3DValues"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Number of receivers
int8 rn

#Binary variable for each receiver that specifies if it is active and with valid values
int8[] ON

#Number of emitters sent in the message
int8 emitn

#Emitter slots in the receiver queue
int16[] slot

#Detected emitters
int8[] detected

#Emitter codes
int16[] code

#Receiver Signal Strength that each receiver measures from each emitter in the world. All measurements of a single receiver are contiguous in memory
int16[] values

"""
  __slots__ = ['rn','ON','emitn','slot','detected','code','values']
  _slot_types = ['int8','int8[]','int8','int16[]','int8[]','int16[]','int16[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rn,ON,emitn,slot,detected,code,values

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RaB3DValues, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rn is None:
        self.rn = 0
      if self.ON is None:
        self.ON = []
      if self.emitn is None:
        self.emitn = 0
      if self.slot is None:
        self.slot = []
      if self.detected is None:
        self.detected = []
      if self.code is None:
        self.code = []
      if self.values is None:
        self.values = []
    else:
      self.rn = 0
      self.ON = []
      self.emitn = 0
      self.slot = []
      self.detected = []
      self.code = []
      self.values = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.rn))
      length = len(self.ON)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.ON))
      buff.write(_struct_b.pack(self.emitn))
      length = len(self.slot)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.slot))
      length = len(self.detected)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.detected))
      length = len(self.code)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.code))
      length = len(self.values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.values))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.rn,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.ON = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.emitn,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.slot = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.detected = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.code = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.values = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.rn))
      length = len(self.ON)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.ON.tostring())
      buff.write(_struct_b.pack(self.emitn))
      length = len(self.slot)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.slot.tostring())
      length = len(self.detected)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.detected.tostring())
      length = len(self.code)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.code.tostring())
      length = len(self.values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.values.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.rn,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.ON = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 1
      (self.emitn,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.slot = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.detected = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.code = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.values = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
