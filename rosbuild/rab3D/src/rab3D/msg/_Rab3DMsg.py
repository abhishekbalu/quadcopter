# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rab3D/Rab3DMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rab3D.msg
import std_msgs.msg

class Rab3DMsg(genpy.Message):
  _md5sum = "c50719e217d7b85248e8bb552deaaa75"
  _type = "rab3D/Rab3DMsg"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

int8 spi1_miss
int8 spi2_miss
int8 uart_miss	
Rab3DObj[] objects
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: rab3D/Rab3DObj
int16 slot
int32 code
int16 adc1
int16 adc2
int16 adc3
int16 adc4
int16 adc5
int16 adc6
int16 adc7
int16 adc8
int16 adc9
int16 adc10
int16 adc11
int16 adc12
int16 adc13
int16 adc14
int16 adc15
int16 adc16


"""
  __slots__ = ['header','spi1_miss','spi2_miss','uart_miss','objects']
  _slot_types = ['std_msgs/Header','int8','int8','int8','rab3D/Rab3DObj[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,spi1_miss,spi2_miss,uart_miss,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Rab3DMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.spi1_miss is None:
        self.spi1_miss = 0
      if self.spi2_miss is None:
        self.spi2_miss = 0
      if self.uart_miss is None:
        self.uart_miss = 0
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.spi1_miss = 0
      self.spi2_miss = 0
      self.uart_miss = 0
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3b.pack(_x.spi1_miss, _x.spi2_miss, _x.uart_miss))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1
        buff.write(_struct_hi16h.pack(_x.slot, _x.code, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5, _x.adc6, _x.adc7, _x.adc8, _x.adc9, _x.adc10, _x.adc11, _x.adc12, _x.adc13, _x.adc14, _x.adc15, _x.adc16))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.spi1_miss, _x.spi2_miss, _x.uart_miss,) = _struct_3b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = rab3D.msg.Rab3DObj()
        _x = val1
        start = end
        end += 38
        (_x.slot, _x.code, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5, _x.adc6, _x.adc7, _x.adc8, _x.adc9, _x.adc10, _x.adc11, _x.adc12, _x.adc13, _x.adc14, _x.adc15, _x.adc16,) = _struct_hi16h.unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3b.pack(_x.spi1_miss, _x.spi2_miss, _x.uart_miss))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1
        buff.write(_struct_hi16h.pack(_x.slot, _x.code, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5, _x.adc6, _x.adc7, _x.adc8, _x.adc9, _x.adc10, _x.adc11, _x.adc12, _x.adc13, _x.adc14, _x.adc15, _x.adc16))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.spi1_miss, _x.spi2_miss, _x.uart_miss,) = _struct_3b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = rab3D.msg.Rab3DObj()
        _x = val1
        start = end
        end += 38
        (_x.slot, _x.code, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5, _x.adc6, _x.adc7, _x.adc8, _x.adc9, _x.adc10, _x.adc11, _x.adc12, _x.adc13, _x.adc14, _x.adc15, _x.adc16,) = _struct_hi16h.unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3b = struct.Struct("<3b")
_struct_3I = struct.Struct("<3I")
_struct_hi16h = struct.Struct("<hi16h")
